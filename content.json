{"meta":{"title":"嗯~~哼~","subtitle":null,"description":"何以解忧？  唯有暴富！","author":"Corrupt_Darkming","url":""},"pages":[{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-02-13T17:11:22.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"about","date":"2020-03-06T14:14:36.000Z","updated":"2020-03-06T13:50:23.046Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[Darkming] 与&nbsp; Darkming&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2020-03-06T13:38:38.000Z","updated":"2021-03-29T10:29:14.354Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-02-13T17:11:22.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-02-13T17:11:22.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"links","date":"2019-12-19T15:11:06.000Z","updated":"2021-04-01T04:37:18.808Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"donate","date":"2020-03-06T15:13:05.000Z","updated":"2020-03-06T13:50:05.052Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"games","date":"2020-03-30T13:55:38.000Z","updated":"2021-04-01T14:53:15.923Z","comments":false,"path":"games/index.html","permalink":"/games/index.html","excerpt":"","text":"","keywords":null},{"title":"music","date":"2020-02-16T10:25:30.000Z","updated":"2021-02-16T10:25:21.891Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2020-03-06T13:59:03.000Z","updated":"2020-03-06T14:00:05.066Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-03-06T13:59:16.000Z","updated":"2020-03-06T14:00:26.143Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-02-13T17:11:22.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"tvseries","date":"2020-03-30T13:55:38.000Z","updated":"2021-04-01T14:38:23.490Z","comments":false,"path":"tvseries/index.html","permalink":"/tvseries/index.html","excerpt":"","text":"","keywords":null},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-02-13T17:11:22.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"更新日志","slug":"更新日志","date":"2021-04-02T12:40:54.176Z","updated":"2021-04-03T01:45:12.709Z","comments":true,"path":"2021/04/02/更新日志/","link":"","permalink":"/2021/04/02/更新日志/","excerpt":"","text":"一、成功部署网站 时间：2020-01-23 新增内容： 系统 1.成功将文件部署到github，博客正式开放。 二、更新维护 时间：2021-03-11 新增内容： 清单 [歌单]开放了歌单功能并更新了暖暖歌单。 [番剧]番剧界面增加了开始追番和追番完成时间，精确追番时间。 三、更新维护 时间：2021-04-02 新增内容： 清单 [电视剧]新增电视剧模块，追剧更省心。 [游戏]新增游戏模块，留住满满的快乐。 系统 1.适配了悬浮动画的宽度。 2.更改了系统统一配色，。 3.更改清单中图片的显示尺寸。 4.PC端和移动端同步增加了网站运行时长功能。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"闪耀暖暖图集","slug":"闪耀暖暖图集","date":"2021-02-16T11:00:00.000Z","updated":"2021-02-16T11:30:15.723Z","comments":false,"path":"2021/02/16/闪耀暖暖图集/","link":"","permalink":"/2021/02/16/闪耀暖暖图集/","excerpt":"","text":"","categories":[{"name":"清单","slug":"清单","permalink":"/categories/清单/"}],"tags":[{"name":"图集","slug":"图集","permalink":"/tags/图集/"}],"keywords":[{"name":"清单","slug":"清单","permalink":"/categories/清单/"}]},{"title":"CentOS_7_下使用宝塔面板快速部署_ASP.NET.Core_网站","slug":"CentOS_7_下使用宝塔面板快速部署_ASP.NET.Core_网站","date":"2020-11-20T06:50:36.000Z","updated":"2021-01-27T08:40:45.655Z","comments":true,"path":"2020/11/20/CentOS_7_下使用宝塔面板快速部署_ASP.NET.Core_网站/","link":"","permalink":"/2020/11/20/CentOS_7_下使用宝塔面板快速部署_ASP.NET.Core_网站/","excerpt":"","text":"前言本文主要是关于在 CentOS 7 下使用宝塔面板快速部署 ASP.NET.Core 网站的一个笔记记录和分享。 因为 碎月 是个萌新，故而，如有错误或疏漏之处，还请谅解！ 文章环境服务器系统：CentOS 7.7 x64 服务器面板：宝塔面板 7.4.3 服务器面板应用：Nginx 1.18.0, Supervisor 管理器 2.2 桌面系统：Windows 10 2004 x64 SSH 客户机：Xshell 6 集成开发环境（IDE）：Visual Studio 2019 Community .Net Core 版本：.NET Core 3.1 文章编辑器：VNote 2.9.1 创建 ASP.NET.Core 网站项目打开 Visual Studio 2019 Community，创建新项目 选择创建 ASP.NET Core Web 应用程序项目 配置新项目信息 项目名称和解决方案名称里的符号推荐仅包含 _ 和 . 选择创建 ASP.NET Core Web 应用程序项目的 Web 应用程序(模型视图控制器)模板 生成与发布 ASP.NET Core 网站项目点击菜单栏的 生成，接着点击发布您的项目 选择发布至本地文件夹 发布位置可默认亦可自定义 点击并确认发布配置，最后点击发布 在 CentOS 上部署 .NET Core 环境使用 ssh 客户机登录服务器，注册 Microsoft 密钥和源，将 Microsoft 包签名密钥添加到受信任密钥列表，并添加包存储库。 sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm 安装 .NET Core 3.1 SDK 中间需要让您确认几次，输入 y 便可继续 sudo yum install dotnet-sdk-3.1 使用宝塔面板创建站点 确保安装了 Nginx 1.18.0 和 Supervisor 管理器 2.2 服务器应用，可前往面板的软件商店查看和安装 打开并登录宝塔面板，点击菜单栏的网站，点击添加站点 创建完成后，点击打开网站目录 点击上传文件目录，将刚刚发布生成的 ASP.NET.Core 网站项目全部上传 上传完成后，查找并确保 您的项目名.dll 文件存在 回到网站菜单里，点击站点设置 点击反向代理，点击添加反向代理，需要代理的目标 URL 为 ASP.NET.Core 的默认运行 URL：http://localhost:5000 添加守护进程距离网站发布成功还差最后一步：通过添加至守护进程，完成启动 ASP.NET.Core 网站项目 在面板里找到之前安装的 Supervisor 管理器 2.2，点击添加守护进程 运行目录就是网站根目录，启动命令格式为：dotnet 您的项目名.dll 网站部署完成现在，你可以输入您在创建网站时绑定的域名或 IP 通过浏览器正常访问啦！ 参考资料 在 CentOS 上安装 .NET Core SDK 或 .NET Core 运行时 使用 Nginx 在 Linux 上托管 ASP.NET Core 本文原创作者是：碎月 本文永久链接是：https://blog.suiyuebaobao.com/article/20201009/ 博客内容遵循：署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议 版权声明：博客内容均遵循上述许可协议，转载请注明本文链接。博客部分内容可能来自互联网，若侵犯了您的权益，请与我联系！","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Markdown_语法快速指南","slug":"Markdown_语法快速指南","date":"2020-11-20T06:46:36.000Z","updated":"2021-01-27T08:41:05.981Z","comments":true,"path":"2020/11/20/Markdown_语法快速指南/","link":"","permalink":"/2020/11/20/Markdown_语法快速指南/","excerpt":"","text":"前言本文主要是对自己使用 Mrakdown 进行书写的一个笔记记录和分享。 因为 碎月 是个萌新，故而，如有错误或疏漏之处，还请谅解！ 什么是 Markdown？Markdown 是一种通过少量简单的标记字符来格式化文本的方法，是一种轻量级的易用的书写语法。您可以用纯文本来书写文档，然后在阅读时呈现一个美观的排版。 其实目前并没有一个标准的 Markdown 语法文档，很多编辑器都会在基本语法上添加自己的扩展语法。所以，为了兼容性下方仅展示被广泛使用的基本语法。 如何上手 Markdown？如果您是刚接触 Markdown， 那么比较好的一个方法是逐个学习 Markdown 语法。刚开始，懂得标题和强调语法就能够写出基本的文档；然后，您可以在书写的过程中不断学习和接触新的语法并不断练习，加强记忆。 语法指南下面是被广泛支持的 Markdown 基本语法的一个概览。 标题# 这是一个&lt;h1&gt;标签 ## 这是一个&lt;h2&gt;标签 ...... ###### 这是一个&lt;h6&gt;标签 注意： # 之后需要至少一个空格。 一个标题应该独占一整行。 强调*此文本为斜体* _此文本为斜体_ **此文本为粗体** __此文本为粗体__ ***此文本为加粗斜体*** ___此文本为加粗斜体___ 例： 此文本为斜体此文本为斜体 此文本为粗体此文本为粗体 此文本为加粗斜体此文本为加粗斜体 注意： 这边推荐使用 *，因为最常用。 如果渲染错误，请尝试在第一个 * 之前以及最后一个 * 之后添加一个空格。如果被标记的文本是以全角符号开始或结尾，一般都需要前后添加一个空格。 段落和换行如果需要您一个新的段落，您应该先在一个段落的后面插入一个空行，然后才输入新的段落的文本。 如： 这是一个段落。 这是另一个段落。 例： 这是一个段落。 这是另一个段落。 注意： 您可直接按键盘上的 Enter 键插入空行，进入下一行。 一般来说，您应该在一个块元素（例如代码块、列表和块引用）后面插入一个空行来结束该元素。 列表无序列表* 项目 1 这是一段在 项目 1 下面的文字。 * 项目 2 * 项目 2a * 项目 2b * 项目 3 例： 项目 1 这是一段在 项目 1 下面的文字。 项目 2 项目 2a 项目 2b 项目 3 注意： # 之后需要至少一个空格。 使用一个空行来结束一个列表序列。 有序列表1. 项目 1 1. 项目 2 注意，列表前面的数字序号其实是无关紧要的，渲染时 Markdown 会自动修改该序号。 3. 项目 3 1. 项目 3a 2. 项目 3b 4. 项目 4 例： 项目 1 项目 2 注意，列表前面的数字序号其实是无关紧要的，渲染时 Markdown 会自动修改该序号。 项目 3 项目 3a 项目 3b 项目 4 注意： 数字 之后需要至少一个空格。 使用一个空行来结束一个列表序列。 表格| 表头 1 | 表头 2 | 表头 3 | | - | - | - | | 单元格 1 | 单元格 2 | 单元格 3 | | 单元格 4 | 单元格 5 | 单元格 6 | 例： 表头 1 表头 2 表头 3 单元格 1 单元格 2 单元格 3 单元格 4 单元格 5 单元格 6 注意： Markdown 的表格默认为左对齐，在第二行 | - | 中的 - 右边加上 : 就右对齐，两边都加上就是居中。 | - |：左对齐 | -: |：右对齐 | :-: |：居中对齐 图片和链接![图像文本,图片失效时显示](/url/to/image.png &quot;可选文本,鼠标在图片上悬停时会显示&quot;) ![图像文本,图片失效时显示](https://www.***.com &quot;可选文本,鼠标在图片上悬停时会显示&quot;) [链接文本](/url/of/the/link) [链接文本](https://www.***.com) 块引用&gt; 这是一个块引用示范。 例： 这是一个块引用示范。 注意 &gt; 标记后面至少需要一个空格。 多行连续的引用可以只在第一行添加标记。 代码块`` 这是另一个普通的代码块。 `` ``lang 这是另一个有代码高亮的代码块。 `` ~~ 这是一个普通的代码块。 ~~ ~~lang 这是一个有代码高亮的代码块。 ~~ 注意： 因语法冲突，实际上上方代码块内两种实现代码块的 ` 和 ~ 个数均应为 3 个。 如：`` ，` ~~~ ，推荐使用：` ` `。 lang 用于指定代码块的代码语言并进行代码高亮，可选；如果不指定，Markdown 引擎不会尝试进行高亮代码。 例：``markdown`：表示该代码块会使用 Mrakdown 的语法高亮规则对代码块内的文本进行高亮。 行内代码块`这是一个行内代码块。` 在想包裹的文字两边输入 `，便可形成行内代码块。 例：这是一个行内代码块。 任务列表- [x] 这是一个已完成的项目。 - [ ] 这是一个未完成的项目。 例： 这是一个已完成的项目。 这是一个未完成的项目。 删除线~~这是一个带删除线的文本。~~ 例： 这是一个带删除线的文本。 分隔线*** --- ___ 您可以在独立的一行中使用 3 个或以上的 *、 - 或 _ 来建立一个分隔线，行内不能有其他文本字符。 三种使用方法的实现效果是一样的，例： Markdown 编辑器推荐这里推荐两个好用的 Markdown 编辑器。 VNote：一款开源且强大的更懂程序员和 Markdown 的笔记管理软件！Github 上的开源项目地址：vnote。 Typora：简单但功能强大，无缝实时预览，所见即所得的免费编辑器。 参考资料 CommonMark GFM: GitHub Flavored Markdown Spec Mastering Markdown 本文原创作者是：碎月 本文永久链接是：https://blog.suiyuebaobao.com/article/20200627/ 博客内容遵循：署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议 版权声明：博客内容均遵循上述许可协议，转载请注明本文链接。博客部分内容可能来自互联网，若侵犯了您的权益，请与我联系！","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"关于一台电脑配置多个_Git_账户","slug":"关于一台电脑配置多个_Git_账户","date":"2020-11-20T06:43:36.000Z","updated":"2021-01-27T08:44:47.759Z","comments":true,"path":"2020/11/20/关于一台电脑配置多个_Git_账户/","link":"","permalink":"/2020/11/20/关于一台电脑配置多个_Git_账户/","excerpt":"","text":"前言本文主要是关于一台电脑配置多个 Git 账户的一个笔记记录和分享。 因为 碎月 是个萌新，故而，如有错误或疏漏之处，还请谅解！ 背景当有多个 Git 账户时，比如： 一个 GitHub，用于自己进行一些公开的开发活动 一个 Aliyun（自己服务器），用于网站的自动化部署 解决方法 生成一个 GitHub 用的 SSH-Key ssh-keygen -t rsa -b 4096 -C &quot;输入你自己的邮箱&quot; 保存为：GitHub_id_rsa 生成一个 Aliyun 用的 SSH-Key $ ssh-keygen -t rsa -C &quot;输入你自己的邮箱&quot; 保存为：Aliyun_id_rsa 在 C:\\Users\\你的用户名.ssh 目录下新建一个 config 文件，添加如下内容： Host 和 HostName 填写 Git 服务器的域名，如：github.com IdentityFile 指定私钥的路径，格式为：~/.ssh/xxx，如：~/.ssh/GitHub_id_rsa Port 填写端口号，非必需，只有当默认的 SHH 端口发生改变时，才需要填写 # GitHub Host github.com HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/GitHub_id_rsa # Aliyun Host 你自己服务器的 IP 或对应的解析域名 HostName 你自己服务器的 IP 或对应的解析域名 Port 修改后的 SSH 端口 PreferredAuthentications publickey IdentityFile ~/.ssh/Aliyun_id_rsa 用 SSH 命令分别测试是否成功 GitHub：ssh -T git@github.com Aliyun：ssh -v git@输入你自己的服务器 IP 或者对应的解析域名 成功的话返回的内容里会出现以下内容： GitHub：Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access. Aliyun：Welcome to Alibaba Cloud Elastic Compute Service ! 参考资料 使用 SSH 连接到 GitHub Git 配置多个 SSH-Key ssh-keyscan命令 本文原创作者是：碎月 本文永久链接是：https://blog.suiyuebaobao.com/article/20200917/ 博客内容遵循：署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议 版权声明：博客内容均遵循上述许可协议，转载请注明本文链接。博客部分内容可能来自互联网，若侵犯了您的权益，请与我联系！","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"将_Windows_Terminal_添加到鼠标右键菜单","slug":"将_Windows_Terminal_添加到鼠标右键菜单","date":"2020-11-20T06:41:36.000Z","updated":"2021-01-27T08:44:59.619Z","comments":true,"path":"2020/11/20/将_Windows_Terminal_添加到鼠标右键菜单/","link":"","permalink":"/2020/11/20/将_Windows_Terminal_添加到鼠标右键菜单/","excerpt":"","text":"前言本文主要是对自己将 Windows Terminal 添加到鼠标右键菜单的流程的一个记录和分享。 因为 碎月 是个萌新，故而，如有错误或疏漏之处，还请谅解！ 查看变量结果下面两个变量的结果后面的操作需要使用到，所以，这里先使用 命令提示符 查看一下。 echo %USERPROFILE% echo %LOCALAPPDATA% 如图： 对应的结果解析： echo %USERPROFILE%：C:\\Users\\用户名 echo %LOCALAPPDATA%：C:\\Users\\用户名\\AppData\\Local 创建右键图标这里创建右键菜单里 Windows Terminal 会显示的图标。 首先，打开刚刚上面第二个变量 echo %LOCALAPPDATA% 显示出来的路径的 Local 文件夹，创建一个 Windows Terminal 文件夹。 将下面的图标文件下载至此文件夹，记得将文件名改为 Windows Terminal.ico。 注入注册表在桌面创建一个 .txt 文本文档，命名随意，但后缀必须改为 .reg，右键编辑此文件。 将下面的内容复制粘贴进去，记得将 用户名 替换为上面变量显示出来的你自己的用户名。 Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt] @=&quot;Windows Terminal Here&quot; &quot;Icon&quot;=&quot;C:\\\\Users\\\\用户名\\\\AppData\\\\Local\\\\Windows Terminal\\\\Windows Terminal.ico&quot; [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt\\command] @=&quot;C:\\\\Users\\\\用户名\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\wt.exe&quot; 如图： 完成后，保存文件并双击执行，一路确认即可。 修改配置文件上面完成的步骤打开的 Windows Terminal 是 固定的默认目录，如果要将打开的目录设置为 当前目录，需要修改 Windows Terminal 的配置文件。 打开 Windows Terminal，点击标题栏中向下的小箭头，点击设置。 在打开的设置文件里，找到 profiles 里面的 list，在里面为每个命令行应用添加该配置：&quot;startingDirectory&quot;: null，添加并保存完成后，就能默认打开进入右键所在的文件夹。 如图： 现在，你可以在任何文件夹里右击打开 Windows Terminal 了。 参考资料 添加Windows Terminal到鼠標右鍵菜單 本文原创作者是：碎月 本文永久链接是：https://blog.suiyuebaobao.com/article/20200711/ 博客内容遵循：署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议 版权声明：博客内容均遵循上述许可协议，转载请注明本文链接。博客部分内容可能来自互联网，若侵犯了您的权益，请与我联系！","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"什么是_MIT_开源许可证？","slug":"什么是_MIT_开源许可证？","date":"2020-11-20T06:38:36.000Z","updated":"2021-01-27T08:41:32.137Z","comments":true,"path":"2020/11/20/什么是_MIT_开源许可证？/","link":"","permalink":"/2020/11/20/什么是_MIT_开源许可证？/","excerpt":"","text":"前言本文主要是对自己理解 MIT 开源许可证的一个笔记记录和分享。 因为 碎月 是个萌新，故而，如有错误或疏漏之处，还请谅解！ 什么是开源许可证？开源许可证是一种法律许可。通过它，版权拥有人明确允许，用户可以免费地使用、修改、共享版权软件。 版权法默认禁止共享，也就是说，没有许可证的软件，就等同于保留版权，虽然开源了，用户只能看看源码，不能用，一用就会侵犯版权。所以软件开源的话，必须明确地授予用户开源许可证。 比如： 我把某个项目的源代码公开放到了 GitHub 上，如果写的还不错，就会有很多人来问我了：你那个代码能不能让我用用？你那个代码我能不能放在我的产品里啊？你那个代码我用了，怎么那么多Bug啊？你那个代码我想当作教学案例使用，请问是不是可以啊？还有，你那个代码我用了，感觉不错，而且我还改了很多地方，我也把它放网上了，而且我还改了个名，你没有意见吧？你有意见我也准备改名了，因为现在这个软件中，我写的代码，比你写的多多了！ （这都是比较有版权意识的，怕不问你就用以后惹上官司。） 我可能懒得回答这么多问题，我把这些可能问到的问题，都写成一段话，放在我的代码里，意思就是说： 我允许你们XXX，我许可你们XXXX，你们可以XXXX，但是，你们必须XXXX，如果你们XXXX了，你们就必须XXXX，对了，对于XXXX这些情况，我可不负责。 你要同意，就用，不同意就别用。如果你用了，但违反了许可证的要求，我可能会告你啊！ 这就是许可证。你可以自己写一个许可证，但是如果你很懒的话 ( 一般人都很懒 ) ，你可以用别人写的比较好的许可证。 写的比较好的开源许可证有很多种，比如：GPL、BSD、MIT、Apache 等等，MIT 只是其中的一个。这些许可证模版都是免费的，毕竟也没人指望这个卖钱。 MIT 开源许可证说了什么？许可证模板地址：MIT 许可证（License） 。 先看下 MIT 许可证原文： MIT License Copyright (c) [year] [fullname] Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 剖析其句子结构第一段 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files ( the “Software” ) , to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: 其大致意思就是：只要满足以下条件，许可被赋予任何 ( 获得本软件拷贝及相关文档的 ) 人 ，这些人可以免费地、没有限制地处理本软件 ( 包括随意地使用、拷贝、合并、发布、分发、再许可、卖拷贝，以及再授权其他人 ( 那些被装配了本软件的 ) 做上面说的这些事 ) 。 注意，and to permit persons 这里的 to permit，是和 to use，to copy 并列的，后面那个 to do so，则是指代前面的的一系列权利，to whom the Software is furnished 是修饰 persons 的，指的是被装配、被配发本软件的人。 再有一点比较有趣的是，这一长段被许可的选项中，后面出现了个 and/or。 and/or 一般用于连接两个选项，比如 A and/or B，意思就是说 A or B or both。这段文字中，虽然 and/or 只连接最后两个选项，但其用意似乎却是连接所有。比如：A, B, C, D and/or E，想表达的是： A and/or B and/or C and/or D and/or E，意思就是 A、B、C、D、E 这些选项可以任意组合选用。这个写法貌似严谨，实则多余。因为没有它完全不影响对文本意思的理解，有了它反而还增加了疑惑。（在文学上或是法律用语上，对 and/or 用法的批评都比较多） 第二段 The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. 这句翻译过来就是：以上版权声明和许可声明都必须包含 ( 在所有的本软件的完整拷贝或者实质性成分中 ) 。所谓实质性成分，可以这样理解，比如你对这个软件做了修改，但只改了 5%，那么版权声明和许可证声明都必须包含，如果你改了 95%，那就未必需要了，具体多少需要，要看是不是实质上 ( substantially ) 仍然是人家的。 第三段 THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 这段话，主要是说本软件是 AS IS 的，AS IS 的意思就是：就这样的，售出 ( 或免费提供 ) 后一概不负任何责任，别再找我，就这样了。有任何问题你就接受或者自己想办法处理吧，反正我这里不再管了，就是这个意思。 上面这段全大写的英文很长，但还好，不算很难，基本上就是：本软件是 AS IS 的，我不提供任何保证， ( 不管是显式的还是隐式的，包括但不限于适销性保证、适用性保证、非侵权性保证 ) ) ，在任何情况下， ( 对于任何的权益追索、损失赔偿或者任何追责 ) ，作者或者版权所有人都不会负责。( 无论这些追责产生自合同、侵权，还是直接或间接来自于本软件以及与本软件使用或经营有关的情形 ) 适销性 ( MERCHANTABILITY ) 就是说商品一旦售出 ( 虽然可能是免费的 ) ，如果确有问题，就可以退换货，一般来说适销性是缺省的保证 ( 即便没有明示 ) ，法律会支持消费者对不合格产品的退换货权利^merch。但对于AS IS这类商品而言，就是说你觉得不好使也别找我。你觉得根本没法用 ( FITNESS FOR A PARTICULAR PURPOSE ) 也别找我，而且我也不保证我这软件是不是侵权了。 MIT 开源许可协议用了几乎一半的篇幅来说这个，足以见其重要性，这是西方人很强的商品经济意识和法律意识导致的。 这是一种撇清关系的态度，就是说：出了什么事都别找我，更别去法院告我。我给你们贡献源码，可不是想给自己找麻烦的，我又不挣你们的钱。 所以，把这个许可证里所有的主干挑出来，其实就是： Permission is granted to any person to deal in the Software without restriction，subject to the following conditions: The above copyright notice and this permission notice shall be included. THE SOFTWARE IS PROVIDED “AS IS”, IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE. 全文翻译过来，大致就是下面这样子： （中文版翻译：卫sir，遵循：CC-BY 协议 ） MIT 开源许可协议 版权 ( C ) [这里填发布年份] [这里填版权者全名] 特此向任何得到本软件拷贝及相关文档 ( 以下统称“本软件” ) 的人授权：被授权人有权免费地、无限制地使用、复制、修改、合并、发布、发行、再许可、售卖本软件拷贝、并有权向被供应人授予同等的权利，但必须满足以下条件： 在本软件的所有副本或实质性使用中，都必须包含以上版权声明和本授权声明。 本软件是“按原样“提供的，不附带任何明示或暗示的保证，包括没有任何有关适销性、适用性、非侵权性保证以及其他保证。在任何情况下，作者或版权持有人，对任何权益追索、损害赔偿以及其他追责，都不负任何责任。无论这些追责产生自合同、侵权，还是直接或间接来自于本软件以及与本软件使用或经营有关的情形。 翻译成大白话缩略版，大约是下面这样的： 版权是我XXX的，源自XXXX这一年！我授权任何人，可以干任何事，包括卖拷贝！但是，你必须：保留我的版权和许可！这软件就是这样的！爱用不用，出了事别找我！ 我怎么用人家代码才算合规？使用一个用了 MIT 协议的源代码，你只需要完整的保留人家的版权和许可证信息即可。 也就是说要包含 LICENSE 文件，这个文件有完整的 MIT 许可证信息，其中也会有作者的版权信息。 人家源码里面的版权和许可信息头，你也得保留。 由于 MIT 协议并不要求使用者公开源码，如果你发行的仅仅是可执行软件（不带源码），那就要在软件的关于界面上说明，并附上 LICENSE 地址和主页（或代码托管地）地址。 我该怎么使用 MIT 许可协议？如果我的开源软件要使用MIT协议，我应该怎么做？ 通常应该这么做： 在一级目录下，给出一个LICENSE（或COPYING）文件，里面就是这个许可证的全文。 在所有的源码头部，说明版权，说明许可。 注：有的项目如果使用了多个许可证，可以建一个 licenses 目录用来统一存放这些许可证。 版权那一行，你还可以写上你软件的主页，代码存放地或者邮箱，一般来说，使用者都不应该删除这行内容的。 小贴士使用了 MIT 许可证后，可以更改为其他许可证吗？当然可以，MIT 允许你干任何事。 所以说，MIT 协议和其他协议的兼容性很强（其实是单向兼容），比如，完全可以把一个MIT协议的软件改为GPL的，但一个GPL的可改不回MIT的。 可以自己写一个许可证吗？当然可以，但是一般时候没有必要。 我可以不写任何许可协议吗？当然可以，不写许可，就是保留所有权利。你可以让他们打电话问你，写邮件问你，你再告诉他们可以干什么。 保留许可的意思基本上就是说，他们除了可以看你的源码 ( 因为你自己把它开源了 ) ，除了著作权法里面说的权利，基本上啥也不能干。 如果有人没有按照我的许可协议做，怎么办？你可以告他哦！不过，能不能打赢官司又是另一个话题了！ 参考资料 卫剑钒：从MIT协议谈契约精神 本文原创作者是：碎月 本文永久链接是：https://blog.suiyuebaobao.com/article/20200914/ 博客内容遵循：署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议 版权声明：博客内容均遵循上述许可协议，转载请注明本文链接。博客部分内容可能来自互联网，若侵犯了您的权益，请与我联系！","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"使用阿里云服务器搭配宝塔面板部署_Hexo_博客","slug":"使用阿里云服务器搭配宝塔面板部署_Hexo_博客","date":"2020-11-20T06:34:36.000Z","updated":"2021-01-27T08:42:03.194Z","comments":true,"path":"2020/11/20/使用阿里云服务器搭配宝塔面板部署_Hexo_博客/","link":"","permalink":"/2020/11/20/使用阿里云服务器搭配宝塔面板部署_Hexo_博客/","excerpt":"","text":"前言本文主要是对自己使用阿里云服务器搭配宝塔面板部署 Hexo 博客的一个流程记录和分享。 因为 碎月 是个萌新，故而，如有错误或疏漏之处，还请谅解！ 配置服务器 这篇文章是建立在您已经熟悉 Hexo 博客框架的使用基础上的，因此不会对本地端的安装流程进行说明。如果您是第一次接触 Hexo 博客框架，可以参考一下我之前的一篇文章：使用 Github+Coding+Hexo 搭建个人博客，里边有详细的本地端安装流程。 服务器我这边用的是 阿里云学生机，12-24 岁都可以购买，一年只需：114 元，购买完服务器，不要忘记了配置安全组的端口开放，这里就不作细述了。 宝塔面板 的安装官网有详细部署流程，这里也不作细述了，记得要安装 Nginx 服务应用。 安装 Git使用 SSH 工具（ Xshell 或者 阿里云服务器自带的远程连接）连接服务器。 使用 git --version 命令查看服务器是否安装了 Git，显示版本号就是已经安装（阿里云的系统镜像一般都有预装），如果显示 -bash: git: command not found 就是未安装，可以尝试使用以下命令安装： # Centos/RedHat 系统 $ yum install git # Debian/Ubuntu 系统 $ apt-get install git 创建 Git 用户// 创建 Git 用户 $ useradd git // 设置 Git 用户的密码 $ passwd git 配置 Git 仓库// 切换至 git 用户 $ su git // 进入 git 用户的根目录 $ cd /home/git/ // 创建博客网站的根目录 $ mkdir -p hexo/blog // 创建 Git 存储仓库文件夹并进入 $ mkdir repos &amp;&amp; cd repos // 创建一个公共的仓库 $ git init --bare blog.git 配置自动部署// 进入 blog.git 仓库文件夹下的 hooks 文件夹 $ cd blog.git/hooks // 创建 hook 钩子函数 $ vim post-receive // 输入的内容如下： // 这步有个小坑：需要先按一下 `a`，左下角显示 `-- INSERT -- ` 后方可进行编辑 //-------------我是分割线，不要理我------------- #!/bin/sh git --work-tree=/home/git/hexo/blog --git-dir=/home/git/repos/blog.git checkout -f //-------------我是分割线，不要理我------------- // 上述内容的意思就是：在我们每次推送完之后，把博客部署目录更新到博客仓库的最新状态，这样便可以完成达到自动部署的目的了。 // 编辑完按下 `ESC`, 然后输入：`:wq` 才可以保存退出哦！ // 为 `post-receive` 文件添加可执行的权限 $ chmod +x post-receive // 退回到 root 超级用户 $ exit // 添加权限 $ chown -R git:git /home/git/repos/blog.git 建立 SSH 信任关系在你的本地电脑上打开 Git Bash，输入以下命令生成一个 SSH Key，因为远程仓库和本地仓库的传输是通过SSH加密的，所以我们需要设置一个Key。 如果你的电脑已经生成过一个 SSH-Key，需要配置多个 Git 账户的话，可以看一下我的另一篇文章：关于一台电脑配置多个 Git 账户 $ ssh-keygen -t rsa -C &quot;输入你自己的邮箱&quot; 然后一路按回车键，使用默认值即可。 生成后，可以在 C 盘的用户目录下找到一个 .ssh 文件夹，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥， id_rsa.pub 是公钥，我们服务器端要的是公钥，而私钥需要保存在我们本地，不要泄漏。 一般用户目录为：C:\\Users\\用户名.ssh 回到 SSH 工具界面，依次执行以下命令： // 切换到 git 用户 $ su git //进入根目录，如果没有 .ssh 目录，那么需要创建，如果存在直接进入即可 $ cd ~ //创建 .ssh 目录 $ mkdir .ssh // 赋予 .ssh 目录权限 $ chmod 700 .ssh // 进入 .ssh 目录 $ cd .ssh // 创建和编辑一个名为 authorized_keys 的文件，并写入公钥（ id_rsa.pub ）内容 $ vim authorized_keys // 添加完成后赋予文件权限 $ chmod 600 authorized_keys 配置免密登录// 退回到 root 超级用户 $ exit // 赋予 git 用户 sudo 权限，并编辑配置文件 $ chmod 740 /etc/sudoers $ vim /etc/sudoers // 找到以下内容 //-------------我是分割线，不要理我------------- ## Allow root to run any commands anywhere root ALL=(ALL) ALL //-------------我是分割线，不要理我------------- // 找到后，在下面添加 git 用户的权限，内容为： //-------------我是分割线，不要理我------------- ## Allow root to run any commands anywhere root ALL=(ALL) ALL git ALL=(ALL) ALL //-------------我是分割线，不要理我------------- // 保存并退出，然后修改回原来的权限： $ chmod 440 /etc/sudoers 现在你可以打开本地电脑上的 Git Bash，输入以下命令，测试一下： ssh -v git@输入你自己的服务器 IP 或者对应的解析域名 最终结果大致显示为：Welcome to Alibaba Cloud Elastic Compute Service ! 为了安全，我们可以禁用 git 用户的 shell 登录权限。从而只能用 git clone，git push 等命令。 回到 SSH 工具界面，依次执行以下命令： // 如果不是 root 超级用户请退回至 root 超级用户 $ exit // 修改 passwd 配置文件 vim /etc/passwd // 将原来的 git:x:1000:1000::/home/git:/bin/bash // 修改为 git:x:1000:1000::/home/git:/bin/git-shell 搭建博客站点打开宝塔面板，依次点击 左边菜单栏的网站 =&gt; 添加站点 =&gt; 输入你的博客站点域名 =&gt; 根目录设置为：/home/git/hexo/blog，其他保持不变，点击提交。 确保你的博客站点域名已解析至服务器 IP 点击 左边菜单栏的软件商店 =&gt; 已安装 =&gt; 找到安装的 Nginx =&gt; 点击 Nginx 的设置 =&gt; 先停止 Nginx 服务 =&gt; 点击配置修改，将第一行的 user www www; 修改成 user root;，点击保存，重新启动 Nginx 服务。 配置和部署 Hexo回到你的本地电脑上,配置 Hexo 博客根目录下的 _config.yml 文件，记得保存： deploy: type: git #用户名 repo: git@你的服务器 IP 或对应的解析域名:/home/git/repos/blog.git #Git仓库 branch: master #分支 好啦，现在一切 OK！你可以使用 Hexo 的部署命令：hexo g -d 进行博客部署推送啦！ 参考资料 将Hexo部署到云服务器 阿里云轻量应用服务器搭配宝塔面板部署Hexo ssh-keyscan命令 本文原创作者是：碎月 本文永久链接是：https://blog.suiyuebaobao.com/article/20200808/ 博客内容遵循：署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议 版权声明：博客内容均遵循上述许可协议，转载请注明本文链接。博客部分内容可能来自互联网，若侵犯了您的权益，请与我联系！","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"使用_Github+PicGo+jsDelivr_搭建个人博客图床","slug":"使用 Github+PicGo+jsDelivr 搭建个人博客图床","date":"2020-11-20T06:32:36.000Z","updated":"2021-01-27T08:43:49.812Z","comments":true,"path":"2020/11/20/使用 Github+PicGo+jsDelivr 搭建个人博客图床/","link":"","permalink":"/2020/11/20/使用 Github+PicGo+jsDelivr 搭建个人博客图床/","excerpt":"","text":"前言本文主要是对自己使用 Github+PicGo+jsDelivr 搭建个人博客图床的基本流程的一个记录和分享。 因为 碎月 是个萌新，故而，如有错误或疏漏之处，还请谅解！ 创建 Github 仓库打开并登录 Github（如果没有账号，请自行注册，不做细述）。 点击页面左上角的 New repository 创建新仓库 仓库名可随意，仓库类型必须选择 Public 进行公开，否则可能无法正常使用！之后点击 Create repository 创建仓库即可。 生成 Token 令牌点击右上角头像，在弹出的下拉菜单里点击 Settings，在 Settings 界面左侧菜单最下方找到并点击 Developer settings。 在 Developer settings 界面的左侧菜单最下方找到并点击 Personal access tokens，然后在右边找到并点击 Generate new token 按钮。 Note 框可随意输入，把 repo 勾上即可。 划到最下方，点击 Generate token 完成创建即可。 在完成创建的界面会出现本次创建的 token。 注意：这个 token 只会出现这么一次，记得将其复制并粘贴保存起来，不可泄露出去！切记！ 安装 PicGo自行前往 Github 上的开源项目 PicGo 的 版本仓库 进行下载，不作细述。 安装之后打开 PicGo，因为 PicGo 不会直接弹出界面，所以你需要在系统右下角的托盘里找到并单击它。 在弹出的 PicGo 界面，找到 PicGo设置，下拉找到并勾上 上传前重命名 和 开启上传提示，这样，每次上传都可以检查一遍图片名称和查看图片是否上传成功。 继续下拉，找到 选择显示的图床，将除 GitHub图床 之外的其余图床选项去掉勾选，因为用不到，防止误操作。 配置 PicGo在 PicGo 界面左侧菜单找到并点击 图床设置，接着点击 GitHub图床，进行配置设置。 配置解读： 设定仓库名：按照 Github 用户名 / 图床仓库名 的格式填写。 设定分支名：默认填写 master。 设定Token：粘贴之前生成的 Token。 指定存储路径：填写你想要储存的路径，如：123/，这样就会在图床仓库下创建一个名为 123 的文件夹，图片将会储存在此文件夹中。 设定自定义域名：它的作用是，在图片上传成功后，PicGo 会按照 自定义域名+指定储存路径+上传的图片名 的方式生成图片的访问链接。因为我们要使用 jsDelivr 进行 CDN 加速访问，所以这里设置为 https://cdn.jsdelivr.net/gh/用户名/图床仓库名，上传完毕后，我们就可以通过 https://cdn.jsdelivr.net/gh/用户名/图床仓库名/指定储存路径/图片名 加速访问我们的图片了。 jsDelivr 是唯一一家拥有中国政府颁发的有效 ICP 许可证的免费公共 CDN，其直接位于中国大陆，想要详细了解 jsDelivr 的朋友，可自行前往 jsDelivr 官网。 点击确定，并设为默认图床。配置完成 PicGo 后，我们需要在系统右下角的托盘找到它，右击，然后点击 重启应用，完成配置生效。 使用 PicGo重启后，老样子，在托盘处找到并单击。 将你需要上传的图片拖拽到上传区，便会自动上传并复制访问链接，将生成的链接粘贴到博客文章中即可，访问速度杠杠的。 此外 PicGo 还有相册功能，可以对已上传的图片进行删除（因为目前没有官方同步功能，所以相册里的删除，只是删除本地的缓存而已，仓库里并不会被删除），修改、复制链接等快捷操作，PicGo 还可以生成不同格式的链接、支持批量上传、快捷键上传、自定义链接格式、上传前重命名等，更有插件系统等着你去探索！ 小贴士关于上传失败等错误在使用 PicGo 期间你可能会遇到很多问题，而这些问题或许都可以通过 PicGo 使用文档，PicGo FAQ，以及前往查看那些在 Github 上 被关闭的 issues 找到答案。 关于上传的图片名字中包含空格目前的 PicGo （2.3.0-beta 版本）并不会对生成和复制的链接中的空格进行自动转义，所以，如果上传的图片名字中包含了空格，那么，生成和复制出来的链接需要你自行对其中的空格进行转义，将空格替换为：%20，才能正常访问。 水印添加工具推荐如果你想为你的博客图片添加水印，这里推荐一款我目前在用的：洋芋田图像工具箱，这是一个开源项目，Github 上的项目地址是：PotatofieldImageToolkit Github 仓库容量大小限制 Github 理论上可无限创建仓库，但官方建议每个仓库保持在 1GB 以下，如果您的仓库超过 1GB，可能会收到 GitHub 支持部门要求减小仓库的电子邮件，并进行人工审查，如若发现有问题：轻则删库，重则封号。仓库大小的硬性限制为最大 100GB。 如果达到 75GB，下次推送更改时您将在终端收到 Git 的警告。另外：Github 单文件限制为最大 100M，超过 50M 会收到警告。 jsDelivr 大小限制据大佬们说：jsDelivr 规定每个通过 jsDelivr 的 CDN 节点进行加速的 Github 仓库 不能超过 50M，Releases 发行包 不能超过 50M 大小，单文件 不得超过 20M 大小。 因为 Github 仓库大等于 50M 大小就无法通过 jsDelivr 进行加速，所以大佬们建议存放图片的图床仓库尽量保持在 50M 以下，或者快到 50M 了，就继续新建一个仓库（反正仓库理论上是可以无限创建的，2333）。 参考资料 PicGo 使用文档 jsDelivr 官网 Github+jsDelivr+PicGo 打造稳定快速、高效免费图床 优雅使用JsDeliver加速文件 本文原创作者是：碎月 本文永久链接是：https://blog.suiyuebaobao.com/article/20200628/ 博客内容遵循：署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议 版权声明：博客内容均遵循上述许可协议，转载请注明本文链接。博客部分内容可能来自互联网，若侵犯了您的权益，请与我联系！","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"使用_Github+Coding+Hexo_搭建个人博客","slug":"使用_Github+Coding+Hexo_搭建个人博客","date":"2020-11-20T06:29:36.000Z","updated":"2021-01-27T08:43:44.292Z","comments":true,"path":"2020/11/20/使用_Github+Coding+Hexo_搭建个人博客/","link":"","permalink":"/2020/11/20/使用_Github+Coding+Hexo_搭建个人博客/","excerpt":"","text":"前言本文主要是对自己使用 Github+Coding 搭配 Hexo 进行国内外分流双线部署和搭建个人博客的基本流程的一个记录和分享。 因为 碎月 是个萌新，故而，如有错误或疏漏之处，还请谅解！ 创建仓库 因为 Coding 的静态网站部署功能改版（新版开始收费了），故而文中有关 Coding 的那部分流程或许已经失效，阅读时强烈推荐忽略有关 Coding 的那部分流程，给您带来不便，还请谅解！ 因为 Github 和 Coding 的 pages 静态网站服务是通过读取你上传至仓库里的静态页面 .html 等文件来帮助你自动更新和展示你的静态网站页面。 所以需要在 Github 和 Coding 上创建仓库来进行部署和托管。 创建 Github 仓库打开并登录 Github（如果没有账号，请自行注册，不做细述）。 点击页面左上角的 New repository 创建新仓库 GitHub Pages 分为：个人主页，组织主页和项目主页三种类型。 个人主页和组织主页的 GitHub Pages 仓库命名必须使用：&lt;用户名或组织名&gt;.github.io，且每个用户或组织只能创建一个，站点发布后分配的默认访问地址为：http(s)://&lt;用户名或组织名&gt;.github.io。 项目主页的 GitHub Pages 仓库名可随意，且理论上可无限创建，没有限制（无论是用户还是组织帐户拥有），站点发布后分配的默认访问地址为：http(s)://&lt;用户名或组织名&gt;.github.io/&lt;项目仓库名&gt;。 使用项目主页创建的话，如果之后没有绑定自定义域名，网站可能无法正常加载样式文件，所以没有自己的域名的话建议选择使用个人主页命名。解决方法请自行前往：Hexo 文档 | 配置 进行查看。 我这边使用了项目主页，因为我购买了自己的域名，所以仓库名可随意，仓库类型必须选择 Public 进行公开，否则无法发布站点！之后点击 Create repository 创建仓库即可。 国内购买域名的话，我知道的就 阿里云 和 腾讯云，我的是在阿里云上买的。 创建 Coding 仓库打开并登录 Coding（如果没有账号，请自行注册，不做细述）。 依次点击左边列表的 项目，右上角的 创建项目。 项目模板可随意选择，之后可在设置修改。 项目名称可随意，因为 Coding 没有那么严格的限制，项目标识会根据你的项目名称自动生成，不满意你也可自定义。之后点击完成创建即可。 搭建环境博客的本地环境除了需要安装 Hexo 博客框架外，还需要 Git 和 Node.js 才能正常运作。 安装 Git打开 Git 官网，点击 Downloads。 选择对应的系统安装包，等待片刻会自动识别并弹出适合你的安装包。我这边使用的是 Windows 10，所以我点击 Windows。 下载完成后，双击安装，根据自己的需求进行勾选或者直接一路 Next 默认安装。 安装完成后，在电脑上任意位置右击鼠标，点击 Git Bash Here。 输入 git --version，若出现版本号，即安装成功。 安装 Node.js打开 Node.js 官网，推荐点击下载长期支持版。 下载完成后，双击安装，除了自定义设置 Custom Setup 界面需单击选择 Add to PATH 选项。剩下的一路 Next 默认安装即可。 安装完成后，同样在电脑上任意位置右击打开 Git Bash Here。 输入 node -v 和npm -v，若出现版本号，即安装成功。 安装 Hexo首先在你喜欢的地方 新建一个文件夹，名称任意。 比如，我的是：Hexo-Blog-Workshop，当然，这是我的创建规范，你无需跟我一样。 这个文件夹就是 博客根目录、Hexo 目录 或者 博客大本营，之后的操作基本全在这个文件夹里。 在该文件夹下的空白地方右击打开 Git Bash Here。输入以下命令安装 Hexo： npm install -g hexo-cli 耐心等待一会，可能会有些慢。甚至可能会有几个报错，无视就行 安装完成后，继续输入 hexo -v，若出现版本号，即安装成功。 接着继续输入 hexo init 初始化文件夹 克隆 Hexo 的 Github 仓库到此文件夹里，所以可能会有点慢，耐心等待即可。 老样子，可能会有些许报错，无视就行 出现 INFO Start blogging with Hexo!，说明初始化成功。 继续输入 npm install 安装必备的组件。 老样子，可能会有些许报错，无视就行 继续输入 npm install hexo-deployer-git --save，安装博客推送插件 没有安装此插件之后是无法将使用 hexo g 生成的静态网页文件，用 hexo d 命令推送至仓库进行部署和站点展示的。 老样子，可能会有些许报错，无视就行 接下来输入 hexo g 生成静态网页文件。 细心的你肯定会发现文件夹里多了个 public 文件夹，这个文件夹里的文件就是之后使用 hexo d 命令会推送至仓库进行部署和展示的站点文件。hexo g 生成的所有文件全在这个文件夹里。 最后，输入 hexo s 打开本地预览服务器。 hexo s 本地预览服务无需事前进行 hexo g 生成站点文件，只要打开了预览服务，整个 博客文件夹 的文件变动，都可以实时预览，你需要做的就是手动刷新浏览器页面。 用浏览器打开 http://localhost:4000，如果搭建成功，就可以看到 Hexo 默认的博客网页： 在 Git Bash Here 里按 ctrl+c 可以关闭本地预览服务器。 链接仓库链接 Github打开 Git Bash Here 分两次输入以下两个命令进行全局设置 Github 用户名和邮箱： git config --global user.name &quot;your_name&quot; 记得把 your_name 改为自己的 GitHub 的用户名 git config --global user.email &quot;your_email@example.com&quot; 记得把 `your_email@example.com` 改为自己的 GitHub 的主要邮箱 输入以下命令查看是否正确显示自己的用户名和邮箱： git config --global --list 接着，在 C:/用户/你的用户名/.ssh 文件夹里（第一次有可能没有 .ssh 这个文件夹，可以自己创建一个）右击打开 Git Bash Here，输入以下命令生成密钥： ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; 记得把 `your_email@example.com` 改为自己的 GitHub 的主要绑定邮箱。 因为这里需要与一会下面生成的 Coding 的密钥进行区分，所以在提示 Enter file in which to save the key 时，输入一个新的文件名称就不会冲突了。 关于一台电脑配置多个 Git 账户，具体可以看一下我的另一篇文章：关于一台电脑配置多个 Git 账户 然后直接一路回车确认即可。 生成后的文件在 C:/用户/你的用户名/.ssh 里面。 用记事本打开并复制生成的 Github_id_rsa.pub 文件里的密钥内容。 切回 Github 界面，点击右上角头像，在下拉菜单里点击 Settings，在 Settings 界面里点击 SSH and GPG keys，点击 New SSH Key 新建 SSH 密钥： 将刚刚复制的全部内容，粘贴到下图 key 框中,Title 随意，点击 Add SSH Key 保存即可。 因为需要配置 Github+Coding 多用户 Git，所以需要回到 C:/用户/你的用户名/.ssh 文件夹，在文件夹里新建一个 config 文件（没有后缀），添加如下内容： 其中 Host 和 HostName 需填写 git 服务器的域名，IdentityFile 是指定私钥的路径 # Github Host github.com HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/Github_id_rsa # Coding Host e.coding.net HostName e.coding.net PreferredAuthentications publickey IdentityFile ~/.ssh/Coding_id_rsa 完成并保存后，在 Git Bash Here 中输入以下命令添加 Github 的 ssh 信任： ssh -T git@github.com 首次使用需要确认并添加主机到本机 ssh 可信列表，当出现下面这句提示时，输入 yes 然后一路回车确认即可： Are you sure you want to continue connecting (yes/no)? 完成后，如果出现带有自己 Github 用户名的语句即为连接成功： Hi &quot;your_name&quot;! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 链接 Coding在刚刚的 C:/用户/你的用户名/.ssh 文件夹里右击打开 Git Bash Here，输入以下命令生成密钥： ssh-keygen -m PEM -t rsa -b 4096 -C &quot;your.email@example.com&quot; 记得把 `your.email@example.com` 改为自己的 Coding 的绑定邮箱。 老样子，因为这里需要与 Github 的密钥进行区分，所以在提示 Enter file in which to save the key 时，输入一个新的文件名称。 之后就是老样子，一路回车确认即可。 老步骤，用记事本打开并复制生成的 Coding_id_rsa.pub 文件里的密钥内容。 接下来跟 Github 上的步骤差不多： 切回 Coding 界面，点击右上角头像，在弹出的下拉菜单里点击 个人设置，在打开的 个人设置 界面点击 SSH公钥 ，点击 新增公钥。 将刚刚复制的全部内容，粘贴到下图 公钥内容 框中,公钥名称 随意，记得把 永久有效 勾上，点击 添加 保存即可。 因为上面已经为多用户 Git 创建了 config 文件，所以直接在 Git Bash Here 中输入以下命令添加 Coding 的 ssh 信任： ssh -T git@e.coding.net 老样子，首次使用需要确认并添加主机到本机 ssh 可信列表，当出现下面这句提示时，输入 yes 然后一路回车确认即可： Are you sure you want to continue connecting (yes/no)? 完成后，出现带有自己 Coding 用户名的语句即为连接成功。 部署博客推送博客在设置推送网站的相关配置前，先在这里说明一下需要用到的文件和文件夹的作用： 博客根目录里的 _config.yml 文件称为 站点配置文件。 博客根目录里的 themes 主题文件夹下，每一个主题文件夹里面都有个独立的 _config.yml 文件，这个称为 主题配置文件。 那么接下来，我们将 Hexo 和 Github 与 Coding 关联起来。 使用记事本打开站点的配置文件 _config.yml，翻到最后修改部署配置： 因为 Coding 的静态网站部署功能改版（新版开始收费了），故而只使用 GitHub 部署博客的只需填写 GitHub 仓库的 SSH 地址便可，给您带来不便，还请谅解！ deploy: type: git repository: github: 这里填入你自己的 GitHub 仓库的 SSH 地址 coding: 这里填入你自己的 Coding 仓库的 SSH 地址 branch: master 保存修改后，在博客根目录的空白处右击打开 Git Bash Here，输入以下命令进行博客文件推送： hexo clean 注：这个命令是清除博客生成的 public 文件夹，博客出现部署异常时使用，不用次次使用 hexo g 注：生成博客站点的静态网页文件 hexo d 注：推送生成的博客站点的静态网页文件至 Github 和 Coding 的博客仓库 小贴士：hexo g 和 hexo d 可组合成一个命令：hexo g -d 显示 INFO Deploy done: git 即为成功推送。 发布博客 因为 Coding 的静态网站部署功能改版（新版开始收费了），故而只使用 GitHub 部署博客的只需阅读 发布 Github 博客 的内容便可，给您带来不便，还请谅解！ 发布 Github 博客打开 GitHub 的博客仓库，点击 Settings，点击 Options，下划页面找到 Github Pages，确认是否成功自动发布。 如上图，便是自动发布成功了，点击 Github 给你分配的网址，便可跳转至部署在 Github 上的博客网站。 当然，开头说过：因为使用的是项目主页，所以如果没有绑定自定义域名的话，网站可能无法加载样式文件。 发布 Coding 博客打开 Coding 的博客代码仓库，点击 持续部署，点击 静态网站，点击 立即发布静态网站（记得先实名认证）。 输入网站名称，部署来源选 本项目仓库，下面的项目和仓库选你创建的博客项目和仓库，触发机制选择 自动部署，点击保存即可。 完成后点击 立即部署，即可通过 Coding 给你分配的网址跳转至部署在 Coding 上的博客网站。 自定义域名与分流 前排提示： 因为 Coding 的静态网站部署功能改版（新版开始收费了），故而只使用 GitHub 部署博客的可忽略该提示，给您带来不便，还请谅解！ 这边建议先部署 Coding 在部署 Github，因为如果你先部署到了 GitHub Pages 并申请和开启了 HTTPS，那么之后在 Coding 的静态网站设置页面绑定你自己的域名，申请 SSL/TLS 安全证书就会显示申请错误，而没有申请到 SSL 证书，当你走 Coding 线路访问你的网站时，浏览器就会提示：连接不安全。 而申请错误原因是：Coding 在验证域名所有权时会定位到 Github Pages 的主机上导致 SSL 证书申请失败。 解决的做法是：先去域名 DNS 把 GitHub 线路的解析暂停掉，过一会（5~10 分钟）再重新申请 SSL 证书，大约一分钟左右就能申请成功，然后开启强制 HTTPS 访问。 证书过期会自动续期，如果自动续期失败需要重新申请时，提示申请失败的话，解决方法是一样的。 首先在本地的博客根目录下的 source 目录里新建名为 CNAME 的文件（没有后缀名），输入自己想要解析的域名，然后保存。 比如我输入：blog.suiyuebaobao.com。 打开并登录你购买的域名的网站，我这边是阿里云，所以我打开阿里云的控制台，进入想要解析的域名的域名解析界面，添加两条解析线路： 因为 Coding 的静态网站部署功能改版（新版开始收费了），故而只使用 GitHub 部署博客的直接添加一条默认指向 GitHub 的便可，给您带来不便，还请谅解！ 第一条为国内访问时指向 Coding，记录类型选择 CNAME，主机记录因为我想要解析的是： blog.suiyuebaobao.com，所以这里我填 blog，解析线路选择 默认，记录值为刚刚 Coding 分配给你的网站地址（记得去掉网址开头的 http://）。 然后切到 Coding 博客仓库，进入静态页面，点击右上角的设置，在打开的设置界面，找到 自定义域名，输入你要解析的域名进行绑定，且记得将下方的 强制HTTPS 勾上。 完成后可将绑定的域名设置成首选域名。 第二条为国外访问时指向 Github，记录类型和主机记录跟上面一样，解析线路选择 境外，记录值为：你的 Github 用户名.github.io。 然后切到 Github 博客仓库，点击 Settings，点击 Options，下划页面找到 Github Pages，将自己要解析的域名输入到 Custom domain 里，点击 Save 保存即可，记得顺便检查下面的 Enforce HTTPS 强制 HTTPS 连接是否勾上。 到此，便完成了使用 Github+Coding 搭配 Hexo 进行国内外分流双线部署和搭建个人博客的基本流程。 现在，你可以使用自己的域名正常的访问你的博客了。 小贴士Hexo 常用命令 npm update hexo -g =&gt; 升级 Hexo 博客框架 hexo n “你的文章名字或 ID” =&gt; 新建文章 hexo g =&gt; 生成博客站点静态页面文件 hexo d =&gt; 推送并部署生成的博客站点静态网页文件 hexo s =&gt; 启动本地预览服务 ctrl + c =&gt; 关闭本地预览服务 hexo n &quot;你的文章名字或 ID&quot; 命令中的 你的文章名字或 ID，如果直接使用中文的话，博客生成的文章网址链接会非常不好看，所以建议使用数字编号或英文代号，文章的名字可以写到生成的文章里的 title 标签里。 hexo g 和 hexo d 可以组成一个简写命令：hexo g -d Markdown 编辑器推荐Hexo 生成的博客文章是 .md 格式，这里推荐两个好用的 Markdown 编辑器。 VNote：一款开源且强大的更懂程序员和 Markdown 的笔记管理软件！Github 上的开源项目地址：vnote。 Typora：简单但功能强大，无缝实时预览，所见即所得的免费编辑器。 Markdown 语法手册如果是第一次使用 Markdown 进行书写文章的朋友，可以看看我的另一篇文章：Markdown 语法快速指南。 Hexo 主题推荐主题的话，这里推荐本博客使用的主题：Volantis，非常的 nice，主题文档全中文且详细，主题的作者大佬也非常的活跃，更新迭代很快。 仓库容量大小限制 Github 理论上可无限创建仓库，但官方建议每个仓库保持在 1GB 以下，如果您的仓库超过 1GB，可能会收到 GitHub 支持部门要求减小仓库的电子邮件，并进行人工审查，如若发现有问题：轻则删库，重则封号。仓库大小的硬性限制为最大 100GB。 如果达到 75GB，下次推送更改时您将在终端收到 Git 的警告。另外：Github 单文件限制为最大 100M，超过 50M 会收到警告。 Coding 目前如果团队人数处于 5 人及以下，可使用 CODING 免费版服务。免费版的 Coding 配额为：单仓库容量 2GB，总仓库容量 100 GB。 参考资料 Hexo 文档 关于 GitHub Pages CODING 静态网站服务 使用 SSH 连接到 GitHub 配置 SSH 公钥 Git 配置多个 SSH-Key 我的磁盘配额是多少？ 团队付费流程 ssh-keyscan命令 本文原创作者是：碎月 本文永久链接是：https://blog.suiyuebaobao.com/article/20200626/ 博客内容遵循：署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议 版权声明：博客内容均遵循上述许可协议，转载请注明本文链接。博客部分内容可能来自互联网，若侵犯了您的权益，请与我联系！","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"国民校草是女生","slug":"国民校草是女生","date":"2020-04-22T09:44:16.000Z","updated":"2021-02-16T11:26:22.622Z","comments":true,"path":"2020/04/22/国民校草是女生/","link":"","permalink":"/2020/04/22/国民校草是女生/","excerpt":"","text":"​ 表面上她是个废柴。实际上她是众神追捧的z。女扮男装，横霸游戏， 当人们知道“他”是女生时，全民沸腾了！ 薄九：“秦大神，有女朋友吗？” 秦漠放下笔记本：“没有。” 薄九低声开撩：“那么从现在开始你有了，就是我。”","categories":[{"name":"清单","slug":"清单","permalink":"/categories/清单/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"清单","slug":"清单","permalink":"/categories/清单/"}]},{"title":"What did hubble see on my birthday？","slug":"what did hubble see on my birthday？","date":"2020-04-02T03:56:36.000Z","updated":"2020-06-27T06:19:53.446Z","comments":true,"path":"2020/04/02/what did hubble see on my birthday？/","link":"","permalink":"/2020/04/02/what did hubble see on my birthday？/","excerpt":"","text":"全景图捕获了彩虹般的恒星挂毯，上面挂满了发光的气体，深色的尘埃云和年轻炽热的恒星。分类为N11B的恒星形成区域位于附近的星系，即大麦哲伦星云中。 关于此图片美国国家航空航天局（NASA）的哈勃太空望远镜（Hubble Space Telescope）在发光气体，深色尘埃云和年轻炽热的恒星的全景图中，捕捉到了邻近星系中恒星诞生的彩虹色挂毯。编号为N11B的恒星形成区域位于大麦哲伦星云（LMC）中，距地球只有160,000光年。凭借其高分辨率，哈勃太空望远镜能够轻松查看LMC中恒星形成的细节，就像地基望远镜能够观测到我们银河系中的恒星形成一样。这个新的哈勃影像放大了N11B，这是归类为N11的恒星形成区域内的一个小部分。 N11是LMC中第二大恒星形成区域。在LMC内，N11的大小和活动仅被庞大的狼蛛星云（也称为30 Doradus）超越。 该图像说明了在附近星系中连续形成恒星的完美情况，在此情况下，上一代大质量恒星触发了新恒星的诞生。图像左侧附近的蓝色和白色恒星集合是宇宙中已知的最大质量恒星之一。图像中热星团周围的区域相对没有气体，因为恒星风和来自恒星的辐射将气体推开了。当这种气体与周围的密集云碰撞并压缩时，这些云会在自身的重力作用下坍塌并开始形成新的恒星。 N11B中的新星团可能是通过这种方式形成的，因为它位于N11复杂的大型中央星际泡泡的边缘。 N11B中的星星现在开始清除它们的出生云，并依次雕刻新的气泡。现在，又有新一代的恒星诞生在N11B中，位于哈勃望远镜影像中央和右侧的深色尘埃云中。在更遥远的星系中可以看到这种连续的恒星诞生事件链，但是在这张新的哈勃影像中却可以很清楚地看到。 在图像的右侧，沿着顶部边缘，是星际尘埃的几个较小的暗云，形状奇特而有趣。看到它们映衬着炽热的星际气体。这些暗云中有几朵是亮边的，因为它们被照亮了，并被邻近热星的辐射蒸发掉了。 这张图片是由哈勃望远镜的广角行星相机2拍摄的，它使用的滤镜可以隔离氢气和氧气发出的光。由天文学家尤伊华·楚（伊利诺伊大学）和耶尔·纳泽（比利时耶利大学）领导的科学团队正在将1999年拍摄的N11B影像与LMC的其他类似地区进行比较。该彩色合成图像由哈勃遗产小组（STScI）和哈勃欧洲航天局信息中心（HEIC）共同制作并共同发布。","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"总有一天，你会喜欢我","slug":"总有一天，你会喜欢我","date":"2020-04-01T15:16:01.000Z","updated":"2020-04-22T09:50:50.424Z","comments":true,"path":"2020/04/01/总有一天，你会喜欢我/","link":"","permalink":"/2020/04/01/总有一天，你会喜欢我/","excerpt":"","text":"少年定终身，二十岁做他大总裁的贴身保镖，这样竹马还能被别人骑跑，她这些年武学生涯算毛？悲催的是，从头到尾被压迫的都是她…… 五年后。 “妈咪！为什么可爱的小白没有爹地？” “我怎么知道！去问你爹地！”夏郁薰盯着电视里的一对新人，头也不回地说。 半个小时后，电视中的婚宴现场，奶娃娃抱着新郎大腿狂喊爹地。 男人死死盯着眼前袖珍版的自己，“你妈咪在哪？” 正在家中看电视的夏郁薰一口水喷在屏幕上，“臭小子，你坑娘呢！”","categories":[{"name":"清单","slug":"清单","permalink":"/categories/清单/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"清单","slug":"清单","permalink":"/categories/清单/"}]},{"title":"A Plague Tale ：Innocence","slug":"A Plague Tale ：Innocence","date":"2020-03-19T13:00:00.000Z","updated":"2021-04-01T10:35:15.593Z","comments":true,"path":"2020/03/19/A Plague Tale ：Innocence/","link":"","permalink":"/2020/03/19/A Plague Tale ：Innocence/","excerpt":"","text":"历经四天，今天终于通关啦！！(๑¯∀¯๑) 游戏介绍：公元1349年，瘟疫在法兰西王国肆虐。阿米西亚和她年幼的弟弟雨果受到宗教审判所的追捕，被迫在被疾病摧毁的村落间颠沛流离。在逃亡的途中，他们需要与其他孩子并肩作战，借助火和光来逃避蜂拥而至的老鼠。二人命运紧密相连，面对未知的恐惧，只能依靠彼此，挣扎求生。","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"许你万丈光芒好","slug":"许你万丈光芒好","date":"2020-02-10T08:38:01.000Z","updated":"2020-04-22T09:50:44.525Z","comments":true,"path":"2020/02/10/许你万丈光芒好/","link":"","permalink":"/2020/02/10/许你万丈光芒好/","excerpt":"","text":"​ “你救了我，我让我爹地以身相许！” 宁夕意外救了只小包子，结果被附赠了一只大包子。 婚后，陆霆骁宠妻如命千依百顺，虐起狗来连亲儿子都不放过。 “老板，公司真给夫人拿去玩？难道夫人要卖公司您也不管？”“卖你家公司了？” “大少爷，不好了！夫人说要把屋顶掀了！”“还不去帮夫人扶梯子。” “粑粑，谢谢你给小宝买的大熊！”“那是买给你妈妈的。” “老公，这个剧本我特别喜欢，我可以接吗？”陆霆骁神色淡定：“可以。” 当天晚上，宁夕连滚带爬跑出去。陆霆骁！可以你大爷！！！","categories":[{"name":"清单","slug":"清单","permalink":"/categories/清单/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"清单","slug":"清单","permalink":"/categories/清单/"}]},{"title":"今天封村了","slug":"2020.1.26","date":"2020-01-26T08:37:36.000Z","updated":"2020-02-21T11:20:38.604Z","comments":true,"path":"2020/01/26/2020.1.26/","link":"","permalink":"/2020/01/26/2020.1.26/","excerpt":"","text":"因为疫情的关系今天封村了，太难了！！！！！！！ 希望赶紧控制住疫情恢复正常的生活(•ૢ⚈͒⌄⚈͒•ૢ)武汉加油！！！","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"恰似寒光遇骄阳","slug":"恰似寒光遇骄阳","date":"2020-01-25T09:51:01.000Z","updated":"2020-04-22T09:50:38.129Z","comments":true,"path":"2020/01/25/恰似寒光遇骄阳/","link":"","permalink":"/2020/01/25/恰似寒光遇骄阳/","excerpt":"","text":"一觉醒来，她看着镜子里的自己， 爆炸头血腥纹身脸化得像鬼，多看一秒都辣眼睛。重生前，她另有所爱，一心逃离，对他恨之入骨。上一世脑子被门夹了放着绝色老公不要，被渣男贱女所害，被最信任的闺密洗脑，落了个众叛亲离的下场。这一世，任各路牛鬼蛇神处心积虑巴不得她离婚让位，不好意思，本小姐智商上线了！","categories":[{"name":"清单","slug":"清单","permalink":"/categories/清单/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"清单","slug":"清单","permalink":"/categories/清单/"}]},{"title":"何以解忧？ 唯有暴富！","slug":"2020.1.24","date":"2020-01-24T09:36:36.000Z","updated":"2020-02-21T11:19:12.349Z","comments":true,"path":"2020/01/24/2020.1.24/","link":"","permalink":"/2020/01/24/2020.1.24/","excerpt":"","text":"何以解忧？？？？？？？ 唯有暴富！！！！！！！","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2020-01-23T12:03:36.000Z","updated":"2020-02-21T11:20:51.376Z","comments":true,"path":"2020/01/23/Hexo-Theme-Sakura/","link":"","permalink":"/2020/01/23/Hexo-Theme-Sakura/","excerpt":"","text":"正在开发中…… 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"既得少年时","slug":"既得少年时","date":"2019-12-17T18:36:45.000Z","updated":"2020-11-20T08:13:46.461Z","comments":true,"path":"2019/12/18/既得少年时/","link":"","permalink":"/2019/12/18/既得少年时/","excerpt":"","text":"​ 大三那年，在三年二班奶茶店里，肖筱抱着手机在看新闻：“早早，你看新闻说民政局未来有望取消结婚证9块9的打证费。” 迟早早停下正在点钱的手，用关爱智障的目光看向肖筱：“你看我缺的是9块9吗？我缺的是那个陪我打证的人！” 旁边桌的岑晏放下手中的书，露出一张清雅拔俗的脸。“迟早早同学，如果你愿意，我可以请客。” -———————– 打证那天，岑晏去交钱。 “恭喜两位新人，9块9。” “9块可以吗？”迟早早习惯性地脱口而出。 工作人员露出尴尬的笑容：“不好意思，工本费不打折。” “迟！早！早！”岑晏脸色逐渐变黑。 迟早早点头哈腰：“对不起，讲价讲顺口了……” -———————婚礼宣誓上，岑晏说：“我成功处理过那么多企业危机，却没躲过我人生中最大的危机—迟早早。遇到她以后，我的人生变得一塌糊涂。” 新娘迟早早：“？？？” 岑晏接着说：“可在这一塌糊涂中，我找到了家的方向。” 一生无定，遇你之地，是为家。","categories":[{"name":"清单","slug":"清单","permalink":"/categories/清单/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"清单","slug":"清单","permalink":"/categories/清单/"}]}]}